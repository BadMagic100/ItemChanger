Things to change

Make ModuleCollection a real collection and hide the Modules field
Make Load and Unload protected in favor of LoadOnce and UnloadOnce
LoadOnce for placements, locations(?), items, and tags.
Hide Loaded from serialization
Need a way for default modules not dependent on being defined in the assembly with IC
Game-agnostic container implementation
    Get rid of static constructor please
use :new() in type constraints throughout to enforce/encourage json-friendly construction
Audit fields -> properties and usage of required throughout
docs
move public APIs out of the "Internal" namespace
see if there is a good way to dejank single/multicost placements
object parent -> taggableobject parent
does incompat warning need to warn about mutual incompat only, or should it always warn
yeet item tree tag?
user-facing error display (possibly via events?) replacing Internal.MessageController.OnError
Handle exceptions in user-facing hooks (e.g. modifyredundantitem)
implement generic int/bool/consumableint costs akin to the ones in hk.ic
check memberwiseclone actually works after the move to properties everywhere
revamp visitstate
separate enums to different files
allow callers to specify Finder sheets
almost all of start location logic is HK specific so let it be a game specific module
revamp event hooking
  * explore using sceneLoaded instead of activeSceneChanged
  * actually trigger all the lifecycle events
Bring back objectlocation (see https://github.com/BadMagic100/ItemChanger/commit/a21ef4f582a22cf72eff92ed3a5ea14ddae1a175)
* Game lifecycle
  * Semipersistent reset
  * Persistent reset
  * Scene change
* IC lifecycle
  * Before new game (start locations would be applied here probably)
  * Start new game
  * Continue game
  * Enter game (profile loaded here)
  * Safe to begin giving items
  * Exit game (profile unloaded here)
save and load profiles from file/stream
ICMod.HookItemChanger equivalent (hooks when creating a profile or loading from file, unhooks when exiting). Maybe this is just load/unload?
    Essentially this is just where Events get hooked now.
PolySharp configure included types explicitly per runtime
Improve loading strategy so that modules can safely add other modules (and placements can do the same and so on)
lock down load state to be accessible only to profile
get OnBeginSceneTransition dependence out of dualplacement (tbd what is the meaningful difference between this and active scene changed)
we hate change scene info and change scene tag
preferred container/container selection carries a lot of hk specific baggage (e.g. if a cost or TP is needed only a shiny is allowed)
incompatibility warning tag has some weird timing related edge cases (ie if I add something incompatible after load it doesn't get caught)
consistent interface for replacable locations
Consider de-staticting some things and associate to profile.

Unity stuff - is a unity shim package needed? How to deal with unity refs from nuget package?
Null sprite
VoidItem implementation https://github.com/homothetyhk/HollowKnight.ItemChanger/commit/b0cd2759804b34e742a745377d184e9de2ab8f3b#diff-16c1eb3b5d162965ceb06081c26439940ec1ebb8aebffc2a9ab274a3f84151e6
ObjectLocation https://github.com/homothetyhk/HollowKnight.ItemChanger/commit/a21ef4f582a22cf72eff92ed3a5ea14ddae1a175#diff-7e44b7af206242e36a693694039d7ac18d3e68239efc19db3b19272b13aaaaae